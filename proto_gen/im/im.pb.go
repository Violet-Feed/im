// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.2
// source: proto/im.proto

package im

import (
	common "im/proto_gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConversationType int32

const (
	ConversationType_ConversationType_Not_Use ConversationType = 0
	ConversationType_One_Chat                 ConversationType = 1
	ConversationType_Group_Chat               ConversationType = 2
	ConversationType_Service_Chat             ConversationType = 3
	ConversationType_AI_Chat                  ConversationType = 4
	ConversationType_System_Chat              ConversationType = 5
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "ConversationType_Not_Use",
		1: "One_Chat",
		2: "Group_Chat",
		3: "Service_Chat",
		4: "AI_Chat",
		5: "System_Chat",
	}
	ConversationType_value = map[string]int32{
		"ConversationType_Not_Use": 0,
		"One_Chat":                 1,
		"Group_Chat":               2,
		"Service_Chat":             3,
		"AI_Chat":                  4,
		"System_Chat":              5,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_im_proto_enumTypes[0].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_proto_im_proto_enumTypes[0]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{0}
}

type MessageType int32

const (
	MessageType_MessageType_Not_Use MessageType = 0
	MessageType_Text                MessageType = 1
	MessageType_Image               MessageType = 2
	MessageType_Video               MessageType = 3
	MessageType_Forward             MessageType = 4
	MessageType_Cmd                 MessageType = 1000
	MessageType_SpecialCmd          MessageType = 1001
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:    "MessageType_Not_Use",
		1:    "Text",
		2:    "Image",
		3:    "Video",
		4:    "Forward",
		1000: "Cmd",
		1001: "SpecialCmd",
	}
	MessageType_value = map[string]int32{
		"MessageType_Not_Use": 0,
		"Text":                1,
		"Image":               2,
		"Video":               3,
		"Forward":             4,
		"Cmd":                 1000,
		"SpecialCmd":          1001,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_im_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_proto_im_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{1}
}

type CommandType int32

const (
	CommandType_CommandType_Not_Use CommandType = 0
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "CommandType_Not_Use",
	}
	CommandType_value = map[string]int32{
		"CommandType_Not_Use": 0,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_im_proto_enumTypes[2].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_proto_im_proto_enumTypes[2]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{2}
}

type SpecialCommandType int32

const (
	SpecialCommandType_SpecialCommandType_Not_Use SpecialCommandType = 0
	SpecialCommandType_Create_Conversation        SpecialCommandType = 1
	SpecialCommandType_Disband_Conversation       SpecialCommandType = 2
	SpecialCommandType_Update_Conversation        SpecialCommandType = 3
	SpecialCommandType_Add_Members                SpecialCommandType = 4
	SpecialCommandType_Remove_Members             SpecialCommandType = 5
)

// Enum value maps for SpecialCommandType.
var (
	SpecialCommandType_name = map[int32]string{
		0: "SpecialCommandType_Not_Use",
		1: "Create_Conversation",
		2: "Disband_Conversation",
		3: "Update_Conversation",
		4: "Add_Members",
		5: "Remove_Members",
	}
	SpecialCommandType_value = map[string]int32{
		"SpecialCommandType_Not_Use": 0,
		"Create_Conversation":        1,
		"Disband_Conversation":       2,
		"Update_Conversation":        3,
		"Add_Members":                4,
		"Remove_Members":             5,
	}
)

func (x SpecialCommandType) Enum() *SpecialCommandType {
	p := new(SpecialCommandType)
	*p = x
	return p
}

func (x SpecialCommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialCommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_im_proto_enumTypes[3].Descriptor()
}

func (SpecialCommandType) Type() protoreflect.EnumType {
	return &file_proto_im_proto_enumTypes[3]
}

func (x SpecialCommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialCommandType.Descriptor instead.
func (SpecialCommandType) EnumDescriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{3}
}

type MessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgBody         *MessageBody `protobuf:"bytes,1,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
	ConIndex        int64        `protobuf:"varint,2,opt,name=con_index,json=conIndex,proto3" json:"con_index,omitempty"`
	Stored          bool         `protobuf:"varint,3,opt,name=stored,proto3" json:"stored,omitempty"`
	UserConIndex    int64        `protobuf:"varint,4,opt,name=user_con_index,json=userConIndex,proto3" json:"user_con_index,omitempty"`
	PreUserConIndex int64        `protobuf:"varint,5,opt,name=pre_user_con_index,json=preUserConIndex,proto3" json:"pre_user_con_index,omitempty"`
	BadgeCount      int64        `protobuf:"varint,6,opt,name=badge_count,json=badgeCount,proto3" json:"badge_count,omitempty"`
	UserCmdIndex    int64        `protobuf:"varint,7,opt,name=user_cmd_index,json=userCmdIndex,proto3" json:"user_cmd_index,omitempty"`
	RetryCount      int32        `protobuf:"varint,8,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
}

func (x *MessageEvent) Reset() {
	*x = MessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEvent) ProtoMessage() {}

func (x *MessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEvent.ProtoReflect.Descriptor instead.
func (*MessageEvent) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{0}
}

func (x *MessageEvent) GetMsgBody() *MessageBody {
	if x != nil {
		return x.MsgBody
	}
	return nil
}

func (x *MessageEvent) GetConIndex() int64 {
	if x != nil {
		return x.ConIndex
	}
	return 0
}

func (x *MessageEvent) GetStored() bool {
	if x != nil {
		return x.Stored
	}
	return false
}

func (x *MessageEvent) GetUserConIndex() int64 {
	if x != nil {
		return x.UserConIndex
	}
	return 0
}

func (x *MessageEvent) GetPreUserConIndex() int64 {
	if x != nil {
		return x.PreUserConIndex
	}
	return 0
}

func (x *MessageEvent) GetBadgeCount() int64 {
	if x != nil {
		return x.BadgeCount
	}
	return 0
}

func (x *MessageEvent) GetUserCmdIndex() int64 {
	if x != nil {
		return x.UserCmdIndex
	}
	return 0
}

func (x *MessageEvent) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

type ConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConInfo   *ConversationInfo `protobuf:"bytes,1,opt,name=con_info,json=conInfo,proto3" json:"con_info,omitempty"`
	MsgBodies []*MessageBody    `protobuf:"bytes,2,rep,name=msg_bodies,json=msgBodies,proto3" json:"msg_bodies,omitempty"`
}

func (x *ConversationMessage) Reset() {
	*x = ConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage) ProtoMessage() {}

func (x *ConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage.ProtoReflect.Descriptor instead.
func (*ConversationMessage) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationMessage) GetConInfo() *ConversationInfo {
	if x != nil {
		return x.ConInfo
	}
	return nil
}

func (x *ConversationMessage) GetMsgBodies() []*MessageBody {
	if x != nil {
		return x.MsgBodies
	}
	return nil
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConId       string `protobuf:"bytes,2,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	ConShortId  int64  `protobuf:"varint,3,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConType     int32  `protobuf:"varint,4,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	ClientMsgId int64  `protobuf:"varint,5,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`
	MsgId       int64  `protobuf:"varint,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgType     int32  `protobuf:"varint,7,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgContent  string `protobuf:"bytes,8,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`
	CreateTime  int64  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Extra       string `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	ConIndex    int64  `protobuf:"varint,11,opt,name=con_index,json=conIndex,proto3" json:"con_index,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{2}
}

func (x *MessageBody) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageBody) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

func (x *MessageBody) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *MessageBody) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *MessageBody) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *MessageBody) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MessageBody) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *MessageBody) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

func (x *MessageBody) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MessageBody) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *MessageBody) GetConIndex() int64 {
	if x != nil {
		return x.ConIndex
	}
	return 0
}

type ConversationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConShortId     int64                    `protobuf:"varint,1,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConId          string                   `protobuf:"bytes,2,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	ConType        int32                    `protobuf:"varint,3,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	UserConIndex   int64                    `protobuf:"varint,4,opt,name=user_con_index,json=userConIndex,proto3" json:"user_con_index,omitempty"`
	BadgeCount     int64                    `protobuf:"varint,5,opt,name=badge_count,json=badgeCount,proto3" json:"badge_count,omitempty"`
	IsMember       bool                     `protobuf:"varint,6,opt,name=is_member,json=isMember,proto3" json:"is_member,omitempty"`
	Members        []*ConversationUserInfo  `protobuf:"bytes,7,rep,name=members,proto3" json:"members,omitempty"`
	ConCoreInfo    *ConversationCoreInfo    `protobuf:"bytes,8,opt,name=con_core_info,json=conCoreInfo,proto3" json:"con_core_info,omitempty"`
	ConSettingInfo *ConversationSettingInfo `protobuf:"bytes,9,opt,name=con_setting_info,json=conSettingInfo,proto3" json:"con_setting_info,omitempty"`
}

func (x *ConversationInfo) Reset() {
	*x = ConversationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationInfo) ProtoMessage() {}

func (x *ConversationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationInfo.ProtoReflect.Descriptor instead.
func (*ConversationInfo) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationInfo) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *ConversationInfo) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

func (x *ConversationInfo) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *ConversationInfo) GetUserConIndex() int64 {
	if x != nil {
		return x.UserConIndex
	}
	return 0
}

func (x *ConversationInfo) GetBadgeCount() int64 {
	if x != nil {
		return x.BadgeCount
	}
	return 0
}

func (x *ConversationInfo) GetIsMember() bool {
	if x != nil {
		return x.IsMember
	}
	return false
}

func (x *ConversationInfo) GetMembers() []*ConversationUserInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ConversationInfo) GetConCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConCoreInfo
	}
	return nil
}

func (x *ConversationInfo) GetConSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.ConSettingInfo
	}
	return nil
}

type ConversationCoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConShortId  int64  `protobuf:"varint,1,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConId       string `protobuf:"bytes,2,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	ConType     int32  `protobuf:"varint,3,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	AvatarUri   string `protobuf:"bytes,5,opt,name=avatar_uri,json=avatarUri,proto3" json:"avatar_uri,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Notice      string `protobuf:"bytes,7,opt,name=notice,proto3" json:"notice,omitempty"`
	OwnerId     int64  `protobuf:"varint,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreateTime  int64  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime  int64  `protobuf:"varint,10,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status      int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Extra       string `protobuf:"bytes,12,opt,name=extra,proto3" json:"extra,omitempty"`
	MemberCount int32  `protobuf:"varint,13,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
}

func (x *ConversationCoreInfo) Reset() {
	*x = ConversationCoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCoreInfo) ProtoMessage() {}

func (x *ConversationCoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCoreInfo.ProtoReflect.Descriptor instead.
func (*ConversationCoreInfo) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{4}
}

func (x *ConversationCoreInfo) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *ConversationCoreInfo) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

func (x *ConversationCoreInfo) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *ConversationCoreInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationCoreInfo) GetAvatarUri() string {
	if x != nil {
		return x.AvatarUri
	}
	return ""
}

func (x *ConversationCoreInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConversationCoreInfo) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *ConversationCoreInfo) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *ConversationCoreInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ConversationCoreInfo) GetModifyTime() int64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *ConversationCoreInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConversationCoreInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ConversationCoreInfo) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

type ConversationSettingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConShortId     int64  `protobuf:"varint,2,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConType        int32  `protobuf:"varint,3,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	MinIndex       int64  `protobuf:"varint,4,opt,name=min_index,json=minIndex,proto3" json:"min_index,omitempty"`
	TopTimeStamp   int64  `protobuf:"varint,5,opt,name=top_time_stamp,json=topTimeStamp,proto3" json:"top_time_stamp,omitempty"`
	PushStatus     int32  `protobuf:"varint,6,opt,name=push_status,json=pushStatus,proto3" json:"push_status,omitempty"`
	ModifyTime     int64  `protobuf:"varint,7,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Extra          string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	ReadIndexEnd   int64  `protobuf:"varint,9,opt,name=read_index_end,json=readIndexEnd,proto3" json:"read_index_end,omitempty"`
	ReadBadgeCount int64  `protobuf:"varint,10,opt,name=read_badge_count,json=readBadgeCount,proto3" json:"read_badge_count,omitempty"`
}

func (x *ConversationSettingInfo) Reset() {
	*x = ConversationSettingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSettingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSettingInfo) ProtoMessage() {}

func (x *ConversationSettingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSettingInfo.ProtoReflect.Descriptor instead.
func (*ConversationSettingInfo) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{5}
}

func (x *ConversationSettingInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConversationSettingInfo) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *ConversationSettingInfo) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *ConversationSettingInfo) GetMinIndex() int64 {
	if x != nil {
		return x.MinIndex
	}
	return 0
}

func (x *ConversationSettingInfo) GetTopTimeStamp() int64 {
	if x != nil {
		return x.TopTimeStamp
	}
	return 0
}

func (x *ConversationSettingInfo) GetPushStatus() int32 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

func (x *ConversationSettingInfo) GetModifyTime() int64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *ConversationSettingInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ConversationSettingInfo) GetReadIndexEnd() int64 {
	if x != nil {
		return x.ReadIndexEnd
	}
	return 0
}

func (x *ConversationSettingInfo) GetReadBadgeCount() int64 {
	if x != nil {
		return x.ReadBadgeCount
	}
	return 0
}

type ConversationUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConShortId     int64  `protobuf:"varint,1,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Privilege      int32  `protobuf:"varint,3,opt,name=privilege,proto3" json:"privilege,omitempty"`
	NickName       string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	BlockTimeStamp int64  `protobuf:"varint,5,opt,name=block_time_stamp,json=blockTimeStamp,proto3" json:"block_time_stamp,omitempty"`
	Operator       int64  `protobuf:"varint,6,opt,name=operator,proto3" json:"operator,omitempty"`
	CreateTime     int64  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime     int64  `protobuf:"varint,8,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status         int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	Extra          string `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *ConversationUserInfo) Reset() {
	*x = ConversationUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationUserInfo) ProtoMessage() {}

func (x *ConversationUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationUserInfo.ProtoReflect.Descriptor instead.
func (*ConversationUserInfo) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{6}
}

func (x *ConversationUserInfo) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *ConversationUserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConversationUserInfo) GetPrivilege() int32 {
	if x != nil {
		return x.Privilege
	}
	return 0
}

func (x *ConversationUserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ConversationUserInfo) GetBlockTimeStamp() int64 {
	if x != nil {
		return x.BlockTimeStamp
	}
	return 0
}

func (x *ConversationUserInfo) GetOperator() int64 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *ConversationUserInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ConversationUserInfo) GetModifyTime() int64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *ConversationUserInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConversationUserInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConShortId  int64  `protobuf:"varint,2,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConId       string `protobuf:"bytes,3,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	ConType     int32  `protobuf:"varint,4,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	ClientMsgId int64  `protobuf:"varint,5,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`
	MsgType     int32  `protobuf:"varint,6,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgContent  string `protobuf:"bytes,7,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{7}
}

func (x *SendMessageRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendMessageRequest) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *SendMessageRequest) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

func (x *SendMessageRequest) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *SendMessageRequest) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *SendMessageRequest) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *SendMessageRequest) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *common.BaseResp `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{8}
}

func (x *SendMessageResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type GetMessageByInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserConIndex int64 `protobuf:"varint,2,opt,name=user_con_index,json=userConIndex,proto3" json:"user_con_index,omitempty"`
}

func (x *GetMessageByInitRequest) Reset() {
	*x = GetMessageByInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByInitRequest) ProtoMessage() {}

func (x *GetMessageByInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByInitRequest.ProtoReflect.Descriptor instead.
func (*GetMessageByInitRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{9}
}

func (x *GetMessageByInitRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMessageByInitRequest) GetUserConIndex() int64 {
	if x != nil {
		return x.UserConIndex
	}
	return 0
}

type GetMessageByInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cons             []*ConversationMessage `protobuf:"bytes,1,rep,name=cons,proto3" json:"cons,omitempty"`
	HasMore          bool                   `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextUserConIndex int64                  `protobuf:"varint,3,opt,name=next_user_con_index,json=nextUserConIndex,proto3" json:"next_user_con_index,omitempty"`
	UserConIndex     int64                  `protobuf:"varint,4,opt,name=user_con_index,json=userConIndex,proto3" json:"user_con_index,omitempty"`
	UserCmdIndex     int64                  `protobuf:"varint,5,opt,name=user_cmd_index,json=userCmdIndex,proto3" json:"user_cmd_index,omitempty"`
	BaseResp         *common.BaseResp       `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *GetMessageByInitResponse) Reset() {
	*x = GetMessageByInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByInitResponse) ProtoMessage() {}

func (x *GetMessageByInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByInitResponse.ProtoReflect.Descriptor instead.
func (*GetMessageByInitResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{10}
}

func (x *GetMessageByInitResponse) GetCons() []*ConversationMessage {
	if x != nil {
		return x.Cons
	}
	return nil
}

func (x *GetMessageByInitResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetMessageByInitResponse) GetNextUserConIndex() int64 {
	if x != nil {
		return x.NextUserConIndex
	}
	return 0
}

func (x *GetMessageByInitResponse) GetUserConIndex() int64 {
	if x != nil {
		return x.UserConIndex
	}
	return 0
}

func (x *GetMessageByInitResponse) GetUserCmdIndex() int64 {
	if x != nil {
		return x.UserCmdIndex
	}
	return 0
}

func (x *GetMessageByInitResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type GetMessageByConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConShortId int64 `protobuf:"varint,2,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConIndex   int64 `protobuf:"varint,3,opt,name=con_index,json=conIndex,proto3" json:"con_index,omitempty"`
	Limit      int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetMessageByConversationRequest) Reset() {
	*x = GetMessageByConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByConversationRequest) ProtoMessage() {}

func (x *GetMessageByConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByConversationRequest.ProtoReflect.Descriptor instead.
func (*GetMessageByConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{11}
}

func (x *GetMessageByConversationRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMessageByConversationRequest) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *GetMessageByConversationRequest) GetConIndex() int64 {
	if x != nil {
		return x.ConIndex
	}
	return 0
}

func (x *GetMessageByConversationRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMessageByConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgBodies []*MessageBody   `protobuf:"bytes,1,rep,name=msg_bodies,json=msgBodies,proto3" json:"msg_bodies,omitempty"`
	BaseResp  *common.BaseResp `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *GetMessageByConversationResponse) Reset() {
	*x = GetMessageByConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByConversationResponse) ProtoMessage() {}

func (x *GetMessageByConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByConversationResponse.ProtoReflect.Descriptor instead.
func (*GetMessageByConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{12}
}

func (x *GetMessageByConversationResponse) GetMsgBodies() []*MessageBody {
	if x != nil {
		return x.MsgBodies
	}
	return nil
}

func (x *GetMessageByConversationResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type MarkReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConShortId     int64 `protobuf:"varint,2,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ReadConIndex   int64 `protobuf:"varint,3,opt,name=read_con_index,json=readConIndex,proto3" json:"read_con_index,omitempty"`
	ReadBadgeCount int64 `protobuf:"varint,4,opt,name=read_badge_count,json=readBadgeCount,proto3" json:"read_badge_count,omitempty"`
}

func (x *MarkReadRequest) Reset() {
	*x = MarkReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkReadRequest) ProtoMessage() {}

func (x *MarkReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkReadRequest.ProtoReflect.Descriptor instead.
func (*MarkReadRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{13}
}

func (x *MarkReadRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MarkReadRequest) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *MarkReadRequest) GetReadConIndex() int64 {
	if x != nil {
		return x.ReadConIndex
	}
	return 0
}

func (x *MarkReadRequest) GetReadBadgeCount() int64 {
	if x != nil {
		return x.ReadBadgeCount
	}
	return 0
}

type MarkReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *common.BaseResp `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *MarkReadResponse) Reset() {
	*x = MarkReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkReadResponse) ProtoMessage() {}

func (x *MarkReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkReadResponse.ProtoReflect.Descriptor instead.
func (*MarkReadResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{14}
}

func (x *MarkReadResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type CreateConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConId       string  `protobuf:"bytes,1,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	ConType     int32   `protobuf:"varint,2,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AvatarUri   string  `protobuf:"bytes,4,opt,name=avatar_uri,json=avatarUri,proto3" json:"avatar_uri,omitempty"`
	Description string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Notice      string  `protobuf:"bytes,6,opt,name=notice,proto3" json:"notice,omitempty"`
	OwnerId     int64   `protobuf:"varint,7,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Members     []int64 `protobuf:"varint,8,rep,packed,name=members,proto3" json:"members,omitempty"`
	Extra       string  `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CreateConversationRequest) Reset() {
	*x = CreateConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationRequest) ProtoMessage() {}

func (x *CreateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{15}
}

func (x *CreateConversationRequest) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

func (x *CreateConversationRequest) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *CreateConversationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConversationRequest) GetAvatarUri() string {
	if x != nil {
		return x.AvatarUri
	}
	return ""
}

func (x *CreateConversationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateConversationRequest) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *CreateConversationRequest) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *CreateConversationRequest) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateConversationRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type CreateConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConInfo  *ConversationCoreInfo `protobuf:"bytes,1,opt,name=con_info,json=conInfo,proto3" json:"con_info,omitempty"`
	BaseResp *common.BaseResp      `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *CreateConversationResponse) Reset() {
	*x = CreateConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationResponse) ProtoMessage() {}

func (x *CreateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationResponse.ProtoReflect.Descriptor instead.
func (*CreateConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{16}
}

func (x *CreateConversationResponse) GetConInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConInfo
	}
	return nil
}

func (x *CreateConversationResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type GetConversationMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConShortId int64 `protobuf:"varint,1,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	Cursor     int64 `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit      int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	OnlyId     bool  `protobuf:"varint,4,opt,name=only_id,json=onlyId,proto3" json:"only_id,omitempty"`
}

func (x *GetConversationMembersRequest) Reset() {
	*x = GetConversationMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationMembersRequest) ProtoMessage() {}

func (x *GetConversationMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationMembersRequest.ProtoReflect.Descriptor instead.
func (*GetConversationMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{17}
}

func (x *GetConversationMembersRequest) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *GetConversationMembersRequest) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *GetConversationMembersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationMembersRequest) GetOnlyId() bool {
	if x != nil {
		return x.OnlyId
	}
	return false
}

type GetConversationMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos  []*ConversationUserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	NextCursor int64                   `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	BaseResp   *common.BaseResp        `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *GetConversationMemberResponse) Reset() {
	*x = GetConversationMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationMemberResponse) ProtoMessage() {}

func (x *GetConversationMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationMemberResponse.ProtoReflect.Descriptor instead.
func (*GetConversationMemberResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{18}
}

func (x *GetConversationMemberResponse) GetUserInfos() []*ConversationUserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *GetConversationMemberResponse) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *GetConversationMemberResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type AddConversationMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConShortId int64   `protobuf:"varint,1,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	ConId      string  `protobuf:"bytes,2,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	Members    []int64 `protobuf:"varint,3,rep,packed,name=members,proto3" json:"members,omitempty"`
	Operator   int64   `protobuf:"varint,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *AddConversationMembersRequest) Reset() {
	*x = AddConversationMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConversationMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConversationMembersRequest) ProtoMessage() {}

func (x *AddConversationMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConversationMembersRequest.ProtoReflect.Descriptor instead.
func (*AddConversationMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{19}
}

func (x *AddConversationMembersRequest) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *AddConversationMembersRequest) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

func (x *AddConversationMembersRequest) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *AddConversationMembersRequest) GetOperator() int64 {
	if x != nil {
		return x.Operator
	}
	return 0
}

type AddConversationMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *common.BaseResp `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *AddConversationMembersResponse) Reset() {
	*x = AddConversationMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConversationMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConversationMembersResponse) ProtoMessage() {}

func (x *AddConversationMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConversationMembersResponse.ProtoReflect.Descriptor instead.
func (*AddConversationMembersResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{20}
}

func (x *AddConversationMembersResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type PushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgBody         *MessageBody `protobuf:"bytes,1,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
	ReceiverId      int64        `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	BadgeCount      int64        `protobuf:"varint,3,opt,name=badge_count,json=badgeCount,proto3" json:"badge_count,omitempty"`
	UserConIndex    int64        `protobuf:"varint,4,opt,name=user_con_index,json=userConIndex,proto3" json:"user_con_index,omitempty"`
	PreUserConIndex int64        `protobuf:"varint,5,opt,name=pre_user_con_index,json=preUserConIndex,proto3" json:"pre_user_con_index,omitempty"`
	UserCmdIndex    int64        `protobuf:"varint,6,opt,name=user_cmd_index,json=userCmdIndex,proto3" json:"user_cmd_index,omitempty"`
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{21}
}

func (x *PushRequest) GetMsgBody() *MessageBody {
	if x != nil {
		return x.MsgBody
	}
	return nil
}

func (x *PushRequest) GetReceiverId() int64 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *PushRequest) GetBadgeCount() int64 {
	if x != nil {
		return x.BadgeCount
	}
	return 0
}

func (x *PushRequest) GetUserConIndex() int64 {
	if x != nil {
		return x.UserConIndex
	}
	return 0
}

func (x *PushRequest) GetPreUserConIndex() int64 {
	if x != nil {
		return x.PreUserConIndex
	}
	return 0
}

func (x *PushRequest) GetUserCmdIndex() int64 {
	if x != nil {
		return x.UserCmdIndex
	}
	return 0
}

type PushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *common.BaseResp `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_im_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_im_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_proto_im_proto_rawDescGZIP(), []int{22}
}

func (x *PushResponse) GetBaseResp() *common.BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

var File_proto_im_proto protoreflect.FileDescriptor

var file_proto_im_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x69, 0x6d, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x22, 0xc5, 0x02,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x83, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x03, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc2, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x13, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x58, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8c, 0x02, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x65, 0x78,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9c,
	0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a,
	0x10, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x85, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xf4, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3d, 0x0a, 0x0c, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2a, 0x7e, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x6e, 0x65, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x49, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x10, 0x05, 0x2a, 0x6e, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x03, 0x43, 0x6d, 0x64, 0x10, 0xe8, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6d, 0x64, 0x10, 0xe9, 0x07, 0x2a, 0x26, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x10,
	0x00, 0x2a, 0xa5, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x5f, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x05, 0x32, 0xce, 0x04, 0x0a, 0x09, 0x49, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x0a, 0x22, 0x76, 0x69,
	0x6f, 0x6c, 0x65, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x69, 0x6d,
	0x50, 0x01, 0x5a, 0x0d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x69,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_im_proto_rawDescOnce sync.Once
	file_proto_im_proto_rawDescData = file_proto_im_proto_rawDesc
)

func file_proto_im_proto_rawDescGZIP() []byte {
	file_proto_im_proto_rawDescOnce.Do(func() {
		file_proto_im_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_im_proto_rawDescData)
	})
	return file_proto_im_proto_rawDescData
}

var file_proto_im_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_im_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_im_proto_goTypes = []interface{}{
	(ConversationType)(0),                    // 0: im.ConversationType
	(MessageType)(0),                         // 1: im.MessageType
	(CommandType)(0),                         // 2: im.CommandType
	(SpecialCommandType)(0),                  // 3: im.SpecialCommandType
	(*MessageEvent)(nil),                     // 4: im.MessageEvent
	(*ConversationMessage)(nil),              // 5: im.ConversationMessage
	(*MessageBody)(nil),                      // 6: im.MessageBody
	(*ConversationInfo)(nil),                 // 7: im.ConversationInfo
	(*ConversationCoreInfo)(nil),             // 8: im.ConversationCoreInfo
	(*ConversationSettingInfo)(nil),          // 9: im.ConversationSettingInfo
	(*ConversationUserInfo)(nil),             // 10: im.ConversationUserInfo
	(*SendMessageRequest)(nil),               // 11: im.SendMessageRequest
	(*SendMessageResponse)(nil),              // 12: im.SendMessageResponse
	(*GetMessageByInitRequest)(nil),          // 13: im.GetMessageByInitRequest
	(*GetMessageByInitResponse)(nil),         // 14: im.GetMessageByInitResponse
	(*GetMessageByConversationRequest)(nil),  // 15: im.GetMessageByConversationRequest
	(*GetMessageByConversationResponse)(nil), // 16: im.GetMessageByConversationResponse
	(*MarkReadRequest)(nil),                  // 17: im.MarkReadRequest
	(*MarkReadResponse)(nil),                 // 18: im.MarkReadResponse
	(*CreateConversationRequest)(nil),        // 19: im.CreateConversationRequest
	(*CreateConversationResponse)(nil),       // 20: im.CreateConversationResponse
	(*GetConversationMembersRequest)(nil),    // 21: im.GetConversationMembersRequest
	(*GetConversationMemberResponse)(nil),    // 22: im.GetConversationMemberResponse
	(*AddConversationMembersRequest)(nil),    // 23: im.AddConversationMembersRequest
	(*AddConversationMembersResponse)(nil),   // 24: im.AddConversationMembersResponse
	(*PushRequest)(nil),                      // 25: im.PushRequest
	(*PushResponse)(nil),                     // 26: im.PushResponse
	(*common.BaseResp)(nil),                  // 27: common.BaseResp
}
var file_proto_im_proto_depIdxs = []int32{
	6,  // 0: im.MessageEvent.msg_body:type_name -> im.MessageBody
	7,  // 1: im.ConversationMessage.con_info:type_name -> im.ConversationInfo
	6,  // 2: im.ConversationMessage.msg_bodies:type_name -> im.MessageBody
	10, // 3: im.ConversationInfo.members:type_name -> im.ConversationUserInfo
	8,  // 4: im.ConversationInfo.con_core_info:type_name -> im.ConversationCoreInfo
	9,  // 5: im.ConversationInfo.con_setting_info:type_name -> im.ConversationSettingInfo
	27, // 6: im.SendMessageResponse.baseResp:type_name -> common.BaseResp
	5,  // 7: im.GetMessageByInitResponse.cons:type_name -> im.ConversationMessage
	27, // 8: im.GetMessageByInitResponse.baseResp:type_name -> common.BaseResp
	6,  // 9: im.GetMessageByConversationResponse.msg_bodies:type_name -> im.MessageBody
	27, // 10: im.GetMessageByConversationResponse.baseResp:type_name -> common.BaseResp
	27, // 11: im.MarkReadResponse.baseResp:type_name -> common.BaseResp
	8,  // 12: im.CreateConversationResponse.con_info:type_name -> im.ConversationCoreInfo
	27, // 13: im.CreateConversationResponse.baseResp:type_name -> common.BaseResp
	10, // 14: im.GetConversationMemberResponse.user_infos:type_name -> im.ConversationUserInfo
	27, // 15: im.GetConversationMemberResponse.baseResp:type_name -> common.BaseResp
	27, // 16: im.AddConversationMembersResponse.baseResp:type_name -> common.BaseResp
	6,  // 17: im.PushRequest.msg_body:type_name -> im.MessageBody
	27, // 18: im.PushResponse.baseResp:type_name -> common.BaseResp
	11, // 19: im.IMService.SendMessage:input_type -> im.SendMessageRequest
	13, // 20: im.IMService.GetMessageByInit:input_type -> im.GetMessageByInitRequest
	15, // 21: im.IMService.GetMessageByConversation:input_type -> im.GetMessageByConversationRequest
	17, // 22: im.IMService.MarkRead:input_type -> im.MarkReadRequest
	19, // 23: im.IMService.CreateConversation:input_type -> im.CreateConversationRequest
	21, // 24: im.IMService.GetConversationMembers:input_type -> im.GetConversationMembersRequest
	23, // 25: im.IMService.AddConversationMembers:input_type -> im.AddConversationMembersRequest
	12, // 26: im.IMService.SendMessage:output_type -> im.SendMessageResponse
	14, // 27: im.IMService.GetMessageByInit:output_type -> im.GetMessageByInitResponse
	16, // 28: im.IMService.GetMessageByConversation:output_type -> im.GetMessageByConversationResponse
	18, // 29: im.IMService.MarkRead:output_type -> im.MarkReadResponse
	20, // 30: im.IMService.CreateConversation:output_type -> im.CreateConversationResponse
	22, // 31: im.IMService.GetConversationMembers:output_type -> im.GetConversationMemberResponse
	24, // 32: im.IMService.AddConversationMembers:output_type -> im.AddConversationMembersResponse
	26, // [26:33] is the sub-list for method output_type
	19, // [19:26] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_im_proto_init() }
func file_proto_im_proto_init() {
	if File_proto_im_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_im_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSettingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConversationMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConversationMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_im_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_im_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_im_proto_goTypes,
		DependencyIndexes: file_proto_im_proto_depIdxs,
		EnumInfos:         file_proto_im_proto_enumTypes,
		MessageInfos:      file_proto_im_proto_msgTypes,
	}.Build()
	File_proto_im_proto = out.File
	file_proto_im_proto_rawDesc = nil
	file_proto_im_proto_goTypes = nil
	file_proto_im_proto_depIdxs = nil
}
