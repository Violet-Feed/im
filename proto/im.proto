syntax = "proto3";
option java_package = "violet.video.common.proto_gen.im";
option go_package = "/proto_gen/im";

//TODO:constant
enum ConversationType{
  ConversationType_Not_Use = 0;
  ConversationType_One_Chat = 1;
  ConversationType_Group_Chat = 2;
  ConversationType_Service_Chat = 3;
  ConversationType_AI_Chat = 4;
  ConversationType_System_Chat = 5;
}

enum MessageType{
  MessageType_Not_Use = 0;
  MessageType_Text = 1;
  MessageType_Image = 2;
  MessageType_Video = 3;
  MessageType_Forward = 4;
  Message_Type_Cmd=1000;
}

message BaseResp{
  optional int32 StateCode=1;
  optional string StateMessage=2;
}

//TODO:http
message SendMessageRequest{
  optional string conv_id = 1;
  optional int64 conv_short_id = 2;
  optional int32 conv_type = 3;
  optional int32 msg_type = 4;
  optional string msg_content = 5;
}

message SendMessageResponse{
  optional BaseResp baseResp = 1;
}

message GetMessageByInitRequest{
  optional int64 user_conv_index=1;
}

message GetMessageByInitResponse{
  repeated MessageBody msg_bodies=1;
  optional int64 next_user_conv_index = 2;
  optional bool has_more = 3;
  optional int64 user_conv_index = 4;    // 初始化后完成从这个位置拉命令消息。 只有首次请求会返回。
  optional int64 user_cmd_index = 5;    // 初始化后完成从这个位置拉最近会话链。 只有首次请求会返回。
}

//TODO:message proto
message MessageBody{
  optional int64 user_id=1;
  optional string conv_id = 2;
  optional int64 conv_short_id = 3;
  optional int32 conv_type = 4;
  optional int64 msg_id=5;
  optional int32 msg_type = 6;
  optional string msg_content = 7;
  optional int64 create_time=8;
}

message MessageEvent{
  optional MessageBody msg_body=1;
  optional int64 conv_index=2;
  optional bool stored=3;
  optional int64 user_conv_index=4;
  optional int64 pre_user_conv_index=5;
  optional int64 badge_count=6;
  optional int64 user_cmd_index=7;
  optional int32 retry_count=8;
}

message GetMessagesRequest{
  optional int64 conv_short_id=1;
  repeated int64 msg_ids=2;
}

message GetMessagesResponse{
  repeated MessageBody msg_bodies=1;
}

message SaveMessageRequest{
  optional MessageBody msg_body=1;
}

message SaveMessageResponse{
  optional BaseResp baseResp = 1;
}
//TODO:conversation proto
message CreateConversationRequest{
  optional string conv_id=1;
  optional int32 conv_type=2;
  optional string name=3;
  optional string avatar_uri=4;
  optional string description=5;
  optional string notice=6;
  optional int64 owner_id=7;
  optional string extra=8;
}

message CreateConversationResponse{
  optional int64 conv_short_id=1;
  optional string conv_info=2;
}

message IncrConversationBadgeRequest{
  optional int64 user_id=1;
  optional int64 conv_short_id=2;
}

message IncrConversationBadgeResponse{
  optional int64 badge_count=1;
}

message GetConversationBadgesRequest{
  optional int64 user_id=1;
  repeated int64 conv_short_ids=2;
}

message GetConversationBadgesResponse{
  repeated int64 badge_counts=1;
}
//TODO:index proto
message AppendConversationIndexRequest{
  optional int64 conv_short_id=1;
  optional int64 msg_id=2;
}

message AppendConversationIndexResponse{
  optional int64 conv_index=1;
}

message PullConversationIndexRequest{
  optional int64 conv_short_id=1;
  optional int64 conv_index=2;
  optional int64 limit=3;
}

message PullConversationIndexResponse{
  repeated int64 msg_ids=1;
  optional int64 last_conv_index=2;
}

message AppendUserConvIndexRequest{
  optional int64 user_id=1;
  optional int64 conv_short_id=2;
}

message AppendUserConvIndexResponse{
  optional int64 user_conv_index=1;
  optional int64 pre_user_conv_index=2;
}

message PullUserConvIndexRequest{
  optional int64 user_id=1;
  optional int64 user_conv_index=2;
  optional int64 limit=3;
}

message PullUserConvIndexResponse{
  repeated int64 conv_short_ids=1;
  optional int64 last_user_conv_index=2;
  optional int64 next_user_conv_index=3;
  optional bool has_more=4;
}

message AppendUserCmdIndexRequest{
  optional int64 user_id=1;
  optional int64 msg_id=2;
}

message AppendUserCmdIndexResponse{
  optional int64 user_cmd_index=1;
}

message PullUserCmdIndexRequest{
  optional int64 user_id=1;
  optional int64 user_cmd_index=2;
  optional int64 limit=3;
}

message PullUserCmdIndexResponse{
  repeated int64 msg_ids=1;
  optional int64 last_user_cmd_index=2;
}
//TODO:push
message PushRequest{
  optional MessageBody msg_body=1;
  optional int64 receiver_id=2;
  optional int64 conv_index=3;
  optional int64 user_conv_index=4;
  optional int64 pre_user_conv_index=5;
  optional int64 badge_count=6;
  optional int64 user_cmd_index=7;
}

message PushResponse{
  optional BaseResp baseResp=1;
}