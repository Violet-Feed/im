syntax = "proto3";
package im;
option java_multiple_files = true;
option java_package = "violet.gateway.common.proto_gen.im";
option go_package = "/proto_gen/im";

enum StatusCode{
  StatusCode_Not_Use = 0;
  Success = 1000;
  Server_Error = 1001;
  Param_Error = 1002;
  OverFrequency_Error = 1003;
  OverLimit_Error = 1004;
  Duplicate_Error = 1005;
  RetryTime_Error = 1006;
  Not_Found_Error = 1007;
}

enum ConversationType{
  ConversationType_Not_Use = 0;
  One_Chat = 1;
  Group_Chat = 2;
  Service_Chat = 3;
  AI_Chat = 4;
  System_Chat = 5;
}

enum MessageType{
  MessageType_Not_Use = 0;
  Text = 1;
  Image = 2;
  Video = 3;
  Forward = 4;
  Cmd = 1000;
  SpecialCmd = 1001;
}

enum CommandType{
  CommandType_Not_Use = 0;
}

enum SpecialCommandType{
  SpecialCommandType_Not_Use = 0;
  Create_Conversation = 1;
  Disband_Conversation = 2;
  Update_Conversation = 3;
  Add_Members = 4;
  Remove_Members = 5;
}

message BaseResp{
  StatusCode StatusCode = 1;
  string StatusMessage = 2;
}

message ConversationInfo{
  optional int64 con_short_id = 1;
  optional string con_id = 2;
  optional int32 con_type = 3;
  optional int64 user_con_index = 4;
  optional int64 badge_count = 5;
  optional bool is_member = 6;
  repeated ConversationUserInfo members = 7;
  optional ConversationCoreInfo con_core_info = 8;
  optional ConversationSettingInfo con_setting_info = 9;
}

message ConversationMessage{
  optional ConversationInfo con_info = 1;
  repeated MessageBody msg_bodies = 2;
}

message MessageSendRequest{
  optional int64 con_short_id = 1;
  optional string con_id = 2;
  optional int32 con_type = 3;
  optional int64 client_msg_id = 4;
  optional int32 msg_type = 5;
  optional string msg_content = 6;
}
message MessageSendResponse{
}

message MessageGetByInitRequest{
  optional int64 user_con_index = 1;
}
message MessageGetByInitResponse{
  repeated ConversationMessage cons = 1;
  optional bool has_more = 2;
  optional int64 next_user_con_index = 3;
  optional int64 user_con_index = 4;
  optional int64 user_cmd_index = 5;
}

message MessageGetByConversationRequest{
  optional int64 con_short_id = 1;
  optional int64 con_index = 2;
  optional int64 limit = 3;
}
message MessageGetByConversationResponse{
  repeated MessageBody msg_bodies = 1;
}

message MarkReadRequest{
  optional int64 user_id = 1;
  optional int64 con_short_id = 2;
  optional int64 read_con_index = 3;
  optional int64 read_badge_count = 4;
}
message MarkReadResponse{
  optional BaseResp baseResp = 255;
}

message MessageBody{
  optional int64 user_id = 1;
  optional string con_id = 2;
  optional int64 con_short_id = 3;
  optional int32 con_type = 4;
  optional int64 client_msg_id = 5;
  optional int64 msg_id = 6;
  optional int32 msg_type = 7;
  optional string msg_content = 8;
  optional int64 create_time = 9;
  optional string extra = 10;
  optional int64 con_index = 11;
}

message MessageEvent{
  optional MessageBody msg_body = 1;
  optional int64 con_index = 2;
  optional bool stored = 3;
  optional int64 user_con_index = 4;
  optional int64 pre_user_con_index = 5;
  optional int64 badge_count = 6;
  optional int64 user_cmd_index = 7;
  optional int32 retry_count = 8;
}

message SendMessageRequest{
  optional int64 user_id = 1;
  optional int64 con_short_id = 2;
  optional string con_id = 3;
  optional int32 con_type = 4;
  optional int64 client_msg_id = 5;
  optional int32 msg_type = 6;
  optional string msg_content = 7;
}
message SendMessageResponse{
  optional BaseResp baseResp = 255;
}

message ConversationCoreInfo {
  optional int64 con_short_id = 1;
  optional string con_id = 2;
  optional int32 con_type = 3;
  optional string name = 4;
  optional string avatar_uri = 5;
  optional string description = 6;
  optional string notice = 7;
  optional int64 owner_id = 8;
  optional int64 create_time = 9;
  optional int64 modify_time = 10;
  optional int32 status = 11;
  optional string extra = 12;
  optional int32 member_count = 13;
}

message ConversationSettingInfo{
  optional int64 user_id = 1;
  optional int64 con_short_id = 2;
  optional int32 con_type = 3;
  optional int64 min_index = 4;
  optional int64 top_time_stamp = 5;
  optional int32 push_status = 6;
  optional int64 modify_time = 7;
  optional string extra = 8;
  optional int64 read_index_end = 9;
  optional int64 read_badge_count = 10;
}

message ConversationUserInfo {
  optional int64 con_short_id = 1;
  optional int64 user_id = 2;
  optional int32 privilege = 3;
  optional string nick_name = 4;
  optional int64 block_time_stamp = 5;
  optional int64 operator = 6;
  optional int64 create_time = 7;
  optional int64 modify_time = 8;
  optional int32 status = 9;
  optional string extra = 10;
}

message CreateConversationRequest{
  optional string con_id = 1;
  optional int32 con_type = 2;
  optional string name = 3;
  optional string avatar_uri = 4;
  optional string description = 5;
  optional string notice = 6;
  optional int64 owner_id = 7;
  repeated int64 members = 8;
  optional string extra = 9;
}
message CreateConversationResponse{
  optional ConversationCoreInfo con_info = 1;
  optional BaseResp baseResp = 255;
}

message GetConversationMembersRequest{
  optional int64 con_short_id = 1;
  optional int64 cursor = 2;
  optional int64 limit = 3;
  optional bool only_id = 4;
}
message GetConversationMemberResponse{
  repeated ConversationUserInfo user_infos = 1;
  optional int64 next_cursor = 2;
  optional BaseResp baseResp = 255;
}

message AddConversationMembersRequest{
  optional int64 con_short_id = 1;
  optional string con_id = 2;
  repeated int64 members = 3;
  optional int64 operator = 4;
}
message AddConversationMembersResponse{
  optional BaseResp baseResp = 255;
}

message PushRequest{
  optional MessageBody msg_body = 1;
  optional int64 receiver_id = 2;
  optional int64 badge_count = 3;
  optional int64 user_con_index = 4;
  optional int64 pre_user_con_index = 5;
  optional int64 user_cmd_index = 6;
}
message PushResponse{
  optional BaseResp baseResp = 255;
}

service IMService{
  rpc SendMessage(SendMessageRequest)returns(SendMessageResponse);
  rpc MessageGetByInit(MessageGetByInitRequest)returns(MessageGetByInitResponse);
  rpc MessageGetByConversation(MessageGetByConversationRequest)returns(MessageGetByConversationResponse);
  rpc MarkRead(MarkReadRequest)returns(MarkReadResponse);
  rpc CreateConversation(CreateConversationRequest)returns(CreateConversationResponse);
  rpc GetConversationMembers(GetConversationMembersRequest)returns(GetConversationMemberResponse);
  rpc AddConversationMembers(AddConversationMembersRequest)returns(AddConversationMembersResponse);
}